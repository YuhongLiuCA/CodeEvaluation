@isTest
public class SOAPMock implements WebServiceMock {
// We need to implement the doInvoke method to work with this
//method clearly has a body
public void DoInvoke(Object stub, Object request, Map<String, Object> response, String endpoint, String soapAction, String requestName, String responseNamespace, String responseName, String responseType){
        soapSforceCom200608Apex.compileAndTestResponse_element responseTest = new soapSforceCom200608Apex.compileAndTestResponse_element();
        soapSforceCom200608Apex.CompileAndTestResult CompileandTestResultSingle = new soapSforceCom200608Apex.CompileAndTestResult();
        soapSforceCom200608Apex.CompileClassResult compileClassResult = new soapSforceCom200608Apex.CompileClassResult();
            compileClassResult.bodyCrc = 111;
            compileClassResult.column = 111;
            compileClassResult.id = 'id';
            compileClassResult.line = 111;
            compileClassResult.name = 'test';
            compileClassResult.problem = '99';
            compileClassResult.success = true;
        // and so on
        soapSforceCom200608Apex.CompileClassResult[] classes = new soapSforceCom200608Apex.CompileClassResult[]{compileClassResult};
        CompileandTestResultSingle.classes = classes;
        soapSforceCom200608Apex.DeleteApexResult deleteClassesSingle = new soapSforceCom200608Apex.DeleteApexResult();
            deleteClassesSingle.id = 'id';
            deleteClassesSingle.problem = 'none';
            deleteClassesSingle.success = true;
        soapSforceCom200608Apex.DeleteApexResult[] deleteClassesFull = new soapSforceCom200608Apex.DeleteApexResult[]{deleteClassesSingle};
        CompileandTestResultSingle.deleteClasses = deleteClassesFull;
        soapSforceCom200608Apex.DeleteApexResult deleteTriggerSingle = new soapSforceCom200608Apex.DeleteApexResult();
            deleteTriggerSingle.id = 'id';
            deleteTriggerSingle.problem ='none';
            deleteTriggerSingle.success = true;
        soapSforceCom200608Apex.DeleteApexResult[] deleteTriggersFull = new soapSforceCom200608Apex.DeleteApexResult[]{deleteTriggerSingle};
        CompileandTestResultSingle.deleteTriggers = deleteTriggersFull;
        soapSforceCom200608Apex.RunTestsResult runTestsResultSingle = new soapSforceCom200608Apex.RunTestsResult();
            runTestsResultSingle.apexLogId = 'theID';
            soapSforceCom200608Apex.CodeCoverageResult codeCoverageSingle = new soapSforceCom200608Apex.CodeCoverageResult();
                codeCoverageSingle.id = 'id according to wsdltoapex';
                    soapSforceCom200608Apex.CodeLocation locationsNotCoveredSingle = new soapSforceCom200608Apex.CodeLocation();
                        locationsNotCoveredSingle.column = 111;
                        locationsNotCoveredSingle.line = 111;
                        locationsNotCoveredSingle.numExecutions = 111;
                        locationsNotCoveredSingle.time_x = 11.00;
                        soapSforceCom200608Apex.CodeLocation[] locationsNotCoveredFull = new soapSforceCom200608Apex.CodeLocation[]{locationsNotCoveredSingle};
                codeCoverageSingle.locationsNotCovered = locationsNotCoveredFull;
                codeCoverageSingle.name = 'test';
                codeCoverageSingle.namespace = 'testspace';
                codeCoverageSingle.numLocations = 15;
                codeCoverageSingle.numLocationsNotCovered = 10;
                codeCoverageSingle.type_x = 'string';
                soapSforceCom200608Apex.CodeCoverageResult[] CodeCoverageFull = new soapSforceCom200608Apex.CodeCoverageResult[]{codeCoverageSingle};
            runTestsResultSingle.codeCoverage = CodeCoverageFull;
                soapSforceCom200608Apex.CodeCoverageWarning codeCoverageWarningsSingle = new soapSforceCom200608Apex.CodeCoverageWarning();
                    codeCoverageWarningsSingle.id = 'id';
                    codeCoverageWarningsSingle.message = 'not enough';
                    codeCoverageWarningsSingle.name = 'test';
                    codeCoverageWarningsSingle.namespace = 'testspace';
                soapSforceCom200608Apex.CodeCoverageWarning[] CodeCoverageWarningFull = new soapSforceCom200608Apex.CodeCoverageWarning[]{codeCoverageWarningsSingle};
            runTestsResultSingle.codeCoverageWarnings = CodeCoverageWarningFull;
                soapSforceCom200608Apex.RunTestFailure RunTestFailureSingle = new soapSforceCom200608Apex.RunTestFailure();
                    RunTestFailureSingle.id = 'id'; 
                    RunTestFailureSingle.message = 'you failed';
                    RunTestFailureSingle.methodName = 'theMethod';
                    RunTestFailureSingle.name = 'test';
                    RunTestFailureSingle.namespace = 'testspace';
                    RunTestFailureSingle.seeAllData = true;
                    RunTestFailureSingle.stackTrace = 'trace of the stack';
                    RunTestFailureSingle.time_x = 4.44;
                    RunTestFailureSingle.type_x = 'type';
                soapSforceCom200608Apex.RunTestFailure[] RunTestFailuresFull = new soapSforceCom200608Apex.RunTestFailure[]{RunTestFailureSingle};
            runTestsResultSingle.failures = RunTestFailuresFull;
                soapSforceCom200608Apex.FlowCoverageResult flowCoverageSingle = new soapSforceCom200608Apex.FlowCoverageResult();
                    List<String> elementsNotCoveredList = new List<String>{'here', 'lies', 'a', 'list', 'of', 'strings'};
                    flowCoverageSingle.elementsNotCovered = elementsNotCoveredList;
                    flowCoverageSingle.flowId = 'floww';
                    flowCoverageSingle.flowName = 'flowww';
                    flowCoverageSingle.flowNamespace = 'flowwww';
                    flowCoverageSingle.numElements = 111;
                    flowCoverageSingle.numElementsNotCovered = 1;
                    flowCoverageSingle.processType = 'active';
                soapSforceCom200608Apex.FlowCoverageResult[] flowCoverageFull = new soapSforceCom200608Apex.FlowCoverageResult[]{flowCoverageSingle};
            runTestsResultSingle.flowCoverage = flowCoverageFull;
                soapSforceCom200608Apex.FlowCoverageWarning flowCoverageWarningSingle = new soapSforceCom200608Apex.FlowCoverageWarning();
                    flowCoverageWarningSingle.flowId = 'floww';
                    flowCoverageWarningSingle.flowName = 'flowww';
                    flowCoverageWarningSingle.flowNamespace = 'flowwww';
                    flowCoverageWarningSingle.message = 'warning';
                soapSforceCom200608Apex.FlowCoverageWarning[] flowCoverageWarningFull = new soapSforceCom200608Apex.FlowCoverageWarning[]{flowCoverageWarningSingle};
            runTestsResultSingle.FlowCoverageWarnings = flowCoverageWarningFull;
            runTestsResultSingle.numFailures = 12;
            runTestsResultSingle.numTestsRun = 14;
                soapSforceCom200608Apex.RunTestSuccess SuccessSingle = new soapSforceCom200608Apex.RunTestSuccess();
                    SuccessSingle.id = 'string';
                    SuccessSingle.methodName = 'methodName';
                    SuccessSingle.name = 'name';
                    SuccessSingle.namespace = 'testspace';
                    SuccessSingle.seeAllData = true;
                    SuccessSingle.time_x = 14.04;
                soapSforceCom200608Apex.RunTestSuccess[] successFull = new soapSforceCom200608Apex.RunTestSuccess[]{SuccessSingle};
            runTestsResultSingle.successes = successFull;
            runTestsResultSingle.totalTime = 12.14;
        CompileandTestResultSingle.RunTestsResult = runTestsResultSingle;
        CompileandTestResultSingle.success = true;
            soapSforceCom200608Apex.CompileTriggerResult triggersSingle = new soapSforceCom200608Apex.CompileTriggerResult();
                triggersSingle.bodyCrc = 132;
                triggersSingle.column = 11;
                triggersSingle.id = 'id';
                triggersSingle.line = 11;
                triggersSingle.name = 'test';
                triggersSingle.problem = 'not mine';
                soapSforceCom200608Apex.CompileIssue problemSingle = new soapSforceCom200608Apex.CompileIssue();
                    problemSingle.column = 33;
                    problemSingle.line = 44;
                    problemSingle.message = 'message';
                soapSforceCom200608Apex.CompileIssue[] problemFull = new soapSforceCom200608Apex.CompileIssue[]{problemSingle};
                triggersSingle.success = true;
                soapSforceCom200608Apex.CompileIssue warningSingle = new soapSforceCom200608Apex.CompileIssue();
                    warningSingle.column = 33;
                    warningSingle.line = 44;
                    warningSingle.message = 'message';
                soapSforceCom200608Apex.CompileIssue[] warningFull = new soapSforceCom200608Apex.CompileIssue[]{warningSingle};
            soapSforceCom200608Apex.CompileTriggerResult[] triggersFull = new soapSforceCom200608Apex.CompileTriggerResult[]{triggersSingle};
        CompileandTestResultSingle.triggers = triggersFull;
         //removing semi-colon invalidates everything in the curly braces
        //removing curly braces makes rest of the variables say variable does not exist
        responseTest.result = CompileandTestResultSingle;
        response.put('response_x', responseTest);
    }
}  //matches class curly braces